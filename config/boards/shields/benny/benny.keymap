/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/* Layers */
#define DEF_L 0
#define NAV_L 1
#define SYM_L 2
#define NUM_L 3
#define BT_L 4

/* Shortcuts */
#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define CALTD LC(LA(DELETE))
#define SLALL LC(A)

/* VS Code */
#define CLONED LS(LA(DOWN))
#define REML LC(FSLH)
#define LDWN LA(DOWN)
#define LUP LA(UP)
#define CRSRINS LS(LA(I))

/* Key Groups */
// #define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 // left-hand keys
// #define KEYS_R 5 6 7 8 9 15 16 17 18 19 24 25 26 27 // right-hand keys
// #define THUMBS 28 29 30 31                        // thumb keys

&mt {
    flavor = "tap-preferred";    
    tapping-term-ms = <400>;
};


&sk {
    release-after-ms = <2000>;
    quick-release;
};
    

/ {
    
    combos {
        compatible = "zmk,combos";
        /*            KEY POSITIONS
         0   1   2   3   4     5   6   7   8   9
        10  11  12  13  14    15  16  17  18  19
        20  21  22  23            24  25  26  27
                    28  29    30  31              */

        /* Functions */
        esc { timeout-ms = <20>; key-positions = <1 2>; bindings = <&kp ESC>; };                        
        ent { timeout-ms = <20>; key-positions = <17 18>; bindings = <&kp ENTER>; };
        tab { timeout-ms = <20>; key-positions = <11 12>; bindings = <&kp TAB>; };
        win { timeout-ms = <20>; key-positions = <20 21>; bindings = <&kp LEFT_GUI>; layers = <DEF_L>; };
        line_com { timeout-ms = <50>; key-positions = <5 15>; bindings = <&kp REML>; layers = <NAV_L>; };
        lctrl { timeout-ms = <20>; key-positions = <13 23>; bindings = <&kp LCTRL>; layers = <DEF_L>; };
        rctrl { timeout-ms = <20>; key-positions = <16 24>; bindings = <&kp RCTRL>; layers = <DEF_L>; };
        lalt { timeout-ms = <20>; key-positions = <11 21>; bindings = <&kp LALT>; layers = <DEF_L>; };
        ralt { timeout-ms = <20>; key-positions = <18 26>; bindings = <&kp RALT>; layers = <DEF_L>; };
        // backsp {timeout-ms = <20>; key-positions = <9 19>; bindings = <&bspc_del>; layers = <DEF_L>; };

        /* Symbols */
        combo_dash { timeout-ms = <20>; key-positions = <16 17>; bindings = <&kp MINUS>; layers = <DEF_L>; };
        combo_lpar { timeout-ms = <20>; key-positions = <1 11>; bindings = <&kp LPAR>; layers = <DEF_L>; };
        combo_lbkt { timeout-ms = <20>; key-positions = <2 12>; bindings = <&kp LBKT>; layers = <DEF_L>; };
        combo_lbrc { timeout-ms = <20>; key-positions = <3 13>; bindings = <&kp LBRC>; layers = <DEF_L>; };
        combo_Rpar { timeout-ms = <20>; key-positions = <8 18>; bindings = <&kp RPAR>; layers = <DEF_L>; };
        combo_Rbkt { timeout-ms = <20>; key-positions = <7 17>; bindings = <&kp RBKT>; layers = <DEF_L>; };
        combo_Rbrc { timeout-ms = <20>; key-positions = <6 16>; bindings = <&kp RBRC>; layers = <DEF_L>; };
        combo_BSLH { timeout-ms = <20>; key-positions = <24 25>; bindings = <&kp BSLH>; layers = <DEF_L>; };
        combo_FSLH { timeout-ms = <20>; key-positions = <25 26>; bindings = <&kp FSLH>; layers = <DEF_L>; };
        combo_LT { timeout-ms = <20>; key-positions = <0 10>; bindings = <&kp LT>; layers = <DEF_L>; };
        combo_GT { timeout-ms = <20>; key-positions = <9 19>; bindings = <&kp GT>; layers = <DEF_L>; };
        combo_EQ { timeout-ms = <20>; key-positions = <5 15>; bindings = <&kp EQUAL>; layers = <DEF_L>; };
        // combo_PIPE { timeout-ms = <20>; key-positions = <26 27>; bindings = <&kp PIPE>; layers = <DEF_L>; };

        /* Letters */
        combo_X { timeout-ms = <50>; key-positions = <21 22>; bindings = <&kp X>; layers = <DEF_L>; };
        combo_K { timeout-ms = <100>; key-positions = <4 14>; bindings = <&kp K>; layers = <DEF_L>; };
        // combo_V { timeout-ms = <50>; key-positions = <13 23>; bindings = <&kp V>; layers = <DEF_L>; };

        /* Layers */
        combo_num { timeout-ms = <100>; key-positions = <28 29>; bindings = <&mo NUM_L>; layers = <DEF_L>; };
        combo_bt { timeout-ms = <100>; key-positions = <0 4>; bindings = <&mo BT_L>; layers = <DEF_L>; };
            
    };

    behaviors {
        // hmrl: homerow_left {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "HOMEROW_LEFT";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <280>;
        //     quick-tap-ms = <175>;
        //     bindings = <&kp>, <&kp>;
        //     hold-trigger-key-positions = <KEYS_R THUMBS>;
        //     hold-trigger-on-release;
        //     global-quick-tap;
        //     };

        // hmrr: homerow_right {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "HOMEROW_RIGHT";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <280>;
        //     quick-tap-ms = <175>;
        //     bindings = <&kp>, <&kp>;
        //     hold-trigger-key-positions = <KEYS_L THUMBS>;
        //     hold-trigger-on-release;
        //     global-quick-tap;
        //     };

        sqt_dqt: sqt_dqt {
            compatible = "zmk,behavior-tap-dance";
            label = "SQT_DQT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SQT>, <&kp DQT>;
            };

        mtrsh: mt_rshift_space {
            compatible = "zmk,behavior-hold-tap";
            label = "RSHIFT_HOLDTAP";
            flavor = "hold-preferred";
            #binding-cells = <2>;    
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            };

        ltsymspc: lt_sym_bspc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SYM_BSPC";
            flavor = "tap-preferred";
            #binding-cells = <2>;    
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&bspc_del>;
            global-quick-tap;
            };

        /* Mod Morphs */
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
            };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

        qu_excl: qu_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QU_EXCL";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                    &kp Q         &kp W         &kp F           &kp P            &kp B           &kp J     &kp L          &kp U          &kp Y         &sqt_dqt   
                    &mt SLALL A   &kp R         &kp S           &kp T            &kp G           &kp M     &kp N          &kp E          &kp I         &kp O      
                    &mt UNDO Z    &mt CUT V     &mt COPY C      &mt PASTE D                                &kp H          &comma_semi    &dot_colon    &qu_excl
                                                                &mo NAV_L        &sk LSHIFT      &mtrsh RSHFT SPACE    &ltsymspc SYM_L 0
            >;
        };
        nav_layer {
            label = "Nav";
            bindings = <
                    &kp N1       &kp F2         &kp F3          &kp F4           &kp F5           &kp HOME  &kp LDWN      &kp LUP        &kp END       &kp PG_UP 
                    &kp CALTD    &kp LALT       &kp LSHFT       &kp LCTRL        &none            &kp LEFT  &kp DOWN      &kp UP         &kp RIGHT     &kp PG_DN
                    &kp UNDO     &kp CUT        &kp COPY        &kp PASTE                                   &kp CLONED    &kp LC(L)      &none         &kp CRSRINS
                                                                &trans           &trans           &trans    &bspc_del
            >;
        };
        sym_layer {
            label = "Sym";
            bindings = <
                    &kp EXCL     &kp AT         &kp HASH        &kp DLLR      &kp PRCNT          &kp CARET     &kp AMPS      &kp STAR       &kp PSCRN    &kp TILDE
                    &kp F1       &kp F2         &kp F3          &kp F4        &kp F5             &none         &kp RCTRL     &kp RSHFT      &kp RALT     &kp GRAVE
                    &kp C_MUTE   &kp C_VOL_DN   &kp C_VOL_UP    &none                                          &none         &none          &none        &none
                                                                &trans           &trans          &trans        &trans
            >;
        };
        num_layer {
            label = "Num";
            bindings = <
                    &kp F1     &kp F2     &kp F3    &kp F4      &kp F5           &kp N0        &kp N1   &kp N2         &kp N3    &bspc_del     
                    &kp F6     &kp F7     &kp F8    &kp F9      &kp F10          &kp DOT       &kp N4   &kp N5         &kp N6    &none
                    &kp F11    &kp F12    &none     &none                                      &kp N7   &kp N8         &kp N9    &none
                                                    &trans      &trans           &trans        &bspc_del
            >;
        };
        bt_layer {
            label = "BT";
            bindings = <
                    &none   &none   &none   &none   &none                 &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &none     
                    &none   &none   &none   &none   &sys_reset            &none         &none         &none         &none           &none     
                    &none   &none   &none   &none                                       &out OUT_USB  &out OUT_BLE  &none           &bt BT_CLR    
                                            &trans  &trans           &trans   &trans
            >;
        };
    };
};
