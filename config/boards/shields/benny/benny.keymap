/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* Layers */
#define DEF_L 0
#define NAV_L 1
#define SYM_L 2
#define NUM_L 3

/* Shortcuts */
#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define CLONED LS(RA(DOWN))
#define REML LC(FSLH)

&mt {
    flavor = "tap-preferred";    
    tapping-term-ms = <400>;
};


&sk {
    release-after-ms = <2000>;
    quick-release;
};


/ {
        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                if-layers = <NAV_L SYM_L>;
                then-layer = <NUM_L>;
                };
        };
        
        combos {
                compatible = "zmk,combos";
                /*                KEY POSITIONS

                0   1   2   3   4     5   6   7   8   9
                10  11  12  13  14    15  16  17  18  19
                20  21  22  23            24  25  26  27
                                28  29    30  31              */

                /* Functions */
                esc { timeout-ms = <50>; key-positions = <0 1>; bindings = <&kp ESC>; };                        
                ent { timeout-ms = <20>; key-positions = <17 18>; bindings = <&kp ENTER>; };
                tab { timeout-ms = <20>; key-positions = <11 12>; bindings = <&kp TAB>; };
                win { timeout-ms = <20>; key-positions = <20 21>; bindings = <&kp LEFT_GUI>;};

                /* Symbols */
                combo_dash { timeout-ms = <20>; key-positions = <24 25>; bindings = <&kp MINUS>; layers = <DEF_L>; };
                // combo_uscore { timeout-ms = <20>; key-positions = <24 25>; bindings = <&kp UNDER>; layers = <DEF_L>; };
                combo_apost { timeout-ms = <20>; key-positions = <18 19>; bindings = <&td23>; layers = <DEF_L>; };

                /* Letters */
                combo_V { timeout-ms = <20>; key-positions = <12 13>; bindings = <&kp V>; layers = <DEF_L>; };
                combo_K { timeout-ms = <20>; key-positions = <16 17>; bindings = <&kp K>; layers = <DEF_L>; };
                    
        };

        behaviors {
                td23: tap_dance23 {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE23";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp SQT>, <&kp DQT>;
                        };

                mtrsh: mt_rshift_space {
                        compatible = "zmk,behavior-hold-tap";
                        label = "RSHIFT_HOLDTAP";
                        flavor = "hold-preferred";
                        #binding-cells = <2>;    
                        tapping-term-ms = <200>;
                        bindings = <&kp>, <&kp>;
                        };

                mtmo: mt_momentary {
                        compatible = "zmk,behavior-hold-tap";
                        label = "MO_HOLDTAP";
                        flavor = "hold-preferred";
                        #binding-cells = <2>;    
                        tapping-term-ms = <200>;
                        bindings = <&mo>, <&kp>;
                        };

                /* Mod Morphs */
                bspc_del: backspace_delete {
                        compatible = "zmk,behavior-mod-morph";
                        label = "BACKSPACE_DELETE";
                        #binding-cells = <0>;
                        bindings = <&kp BACKSPACE>, <&kp DELETE>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                        keep-mods = <(MOD_RSFT)>;
                        };

                comma_semi: comma_semi {
                        compatible = "zmk,behavior-mod-morph";
                        label = "COMMA_SEMI";
                        #binding-cells = <0>;
                        bindings = <&kp COMMA>, <&kp SEMI>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                        };

                dot_colon: dot_colon {
                        compatible = "zmk,behavior-mod-morph";
                        label = "DOT_COLON";
                        #binding-cells = <0>;
                        bindings = <&kp DOT>, <&kp COLON>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                        };

        };

        keymap {
                compatible = "zmk,keymap";
                default_layer {
                        bindings = <
                                &kp Q         &kp W         &kp F           &kp P            &kp B           &kp J         &kp L         &kp U          &kp Y        &bspc_del   
                                &mt LC(A) A   &kp R         &kp S           &kp T            &kp G           &kp M         &mt LCTRL N   &kp E          &kp I        &kp O      
                                &mt UNDO Z    &mt CUT X     &mt COPY C      &mt PASTE D                                    &kp H         &comma_semi    &dot_colon   &kp FSLH
                                                                            &mo NAV_L        &sk LSHIFT      &mtrsh RSHFT SPACE    &mo SYM_L
                        >;
                };
                nav_layer {
                label = "Nav";
                        bindings = <
                                &mt EXCL N1  &mt AT N2      &mt HASH N3     &mt DLLR N4      &none            &kp REML     &kp HOME      &kp END        &kp PRINTSCREEN  &trans 
                                &none        &kp RALT       &kp LSHFT       &kp LCTRL        &none            &kp LEFT     &kp DOWN      &kp UP         &kp RIGHT        &td23
                                &trans       &trans         &trans          &trans                                         &kp CLONED    &none          &none            &none
                                                                            &trans           &trans           &trans       &trans
                        >;
                };
                sym_layer {
                label = "Sym";
                        bindings = <
                                &kp EXCL     &kp AT         &kp HASH        &kp DLLR      &kp PRCNT          &kp MINUS     &kp AMPS      &kp STAR       &kp LPAR       &kp RPAR
                                &kp C_MUTE   &kp C_VOL_DN   &kp C_VOL_UP    &kp TILDE     &kp GRAVE          &kp UNDER     &kp EQUAL     &kp LBKT       &kp RBKT       &kp PIPE
                                &trans       &trans         &trans          &none                                          &kp PLUS      &kp LBRC       &kp RBRC       &kp BSLH
                                                                            &trans           &trans          &trans        &trans
                        >;
                };
                num_layer {
                label = "Num";
                        bindings = <
                                &none         &none         &none           &kp F5           &kp F8           &kp N0        &kp N1     &kp N2           &kp N3      &none     
                                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3     &none            &kp DOT       &kp N4     &kp N5           &kp N6      &none
                                &none         &none         &none           &none                                           &kp N7     &kp N8           &kp N9      &none
                                                                            &trans           &trans           &trans        &trans
                        
                        >;
                };
        

        };
};
